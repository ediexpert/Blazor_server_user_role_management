@page "/users"
@using Microsoft.AspNetCore.Identity
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject UserManager<IdentityUser> userManager

<h3>Users</h3>
<MessageComponent IsError=isError Message="@msg"></MessageComponent>
@if (!string.IsNullOrEmpty(messageSuccess))
{
    <p style="color: green">@messageSuccess</p>
}
@if (!string.IsNullOrEmpty(messageError))
{
    <p style="color: red">@messageError</p>
}

<h3>Create New User</h3>

<div class="form-group row">
    <label for="name" class="col-sm-2 col-form-label">Name</label>
    <div class="col-sm-10">
        <input type="text" class="form-control-plaintext" id="name" placeholder="John Doe" @bind="name">
    </div>
</div>
<div class="form-group row">
    <label for="staticEmail" class="col-sm-2 col-form-label">Email</label>
    <div class="col-sm-10">
        <input type="email" class="form-control" id="staticEmail" placeholder="email@example.com" @bind="email">
    </div>
</div>
<div class="form-group row">
    <label for="inputPassword" class="col-sm-2 col-form-label">Password</label>
    <div class="col-sm-10">
        <input type="password" class="form-control" id="inputPassword" placeholder="Password" @bind="password">
    </div>
</div>
<button class="btn btn-primary" @onclick="AddUser">Add User</button>
<hr />
<table class="table">
    <thead>
        <tr>
            <th>Username</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>
                    <a href="/user/@user.UserName">Edit</a>
                    <button class="btn btn-primary" @onclick="() => EditUser(user.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    string messageSuccess = string.Empty;
    string messageError = string.Empty;
    string name, email, password;
    IEnumerable<IdentityUser> users = Enumerable.Empty<IdentityUser>();
    bool isError = false;
    string msg = null;

    protected override Task OnInitializedAsync()
    {
        FetchUsers();
        return base.OnInitializedAsync();
    }
    void FetchUsers()
    {
        users = userManager.Users.ToList();
    }
    private async Task EditUser(string userId)
    {
        var user = await userManager.FindByIdAsync(userId);
        if (user != null)
        {
            var token = await userManager.GeneratePasswordResetTokenAsync(user);
        }
    }

    private async Task DeleteUser(string userId)
    {
        var user = await userManager.FindByIdAsync(userId);
        if (user != null)
        {
            await userManager.DeleteAsync(user);
        }
        FetchUsers();
    }

    private async void AddUser()
    {
        if (string.IsNullOrEmpty(password) || string.IsNullOrEmpty(email))
        {
            isError = true; msg = $"Email or password cannot be empty.";
            StateHasChanged();
            return;
        }

        var user = await userManager.FindByEmailAsync(email);
        if (user != null)
        {
            isError = true;  msg = $"User already exist with email '{email}'";
            StateHasChanged();
            return;
        }

        user = new IdentityUser(email);
        user.Email = email;
        var identityResult = await userManager.CreateAsync(user, password);
        if (!identityResult.Succeeded)
        {
            msg = string.Join(',', identityResult.Errors.Select(x => x.Description));  isError = false;
            StateHasChanged();
            return;
        }
        msg = $"User created"; isError = false;
        ResetForm();
        FetchUsers();
        StateHasChanged();
    }

    void ResetForm()
    {
        name = string.Empty; email = string.Empty; password = string.Empty;
    }
}

